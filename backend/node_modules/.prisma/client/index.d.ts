
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Times
 * 
 */
export type Times = {
  id: number
  nometime: string
  created_at: string | null
  updated_at: string | null
  logo: string
}

/**
 * Model Jogadores
 * 
 */
export type Jogadores = {
  id: number
  nomejogador: string
  numerocamisa: number
  posicao: string
  timesId: number | null
  avatar: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Times
 * const times = await prisma.times.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Times
   * const times = await prisma.times.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.times`: Exposes CRUD operations for the **Times** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Times
    * const times = await prisma.times.findMany()
    * ```
    */
  get times(): Prisma.TimesDelegate<GlobalReject>;

  /**
   * `prisma.jogadores`: Exposes CRUD operations for the **Jogadores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jogadores
    * const jogadores = await prisma.jogadores.findMany()
    * ```
    */
  get jogadores(): Prisma.JogadoresDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Times: 'Times',
    Jogadores: 'Jogadores'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TimesCountOutputType
   */


  export type TimesCountOutputType = {
    jogadorestime: number
  }

  export type TimesCountOutputTypeSelect = {
    jogadorestime?: boolean
  }

  export type TimesCountOutputTypeGetPayload<S extends boolean | null | undefined | TimesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TimesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TimesCountOutputTypeArgs)
    ? TimesCountOutputType 
    : S extends { select: any } & (TimesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TimesCountOutputType ? TimesCountOutputType[P] : never
  } 
      : TimesCountOutputType




  // Custom InputTypes

  /**
   * TimesCountOutputType without action
   */
  export type TimesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TimesCountOutputType
     */
    select?: TimesCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Times
   */


  export type AggregateTimes = {
    _count: TimesCountAggregateOutputType | null
    _avg: TimesAvgAggregateOutputType | null
    _sum: TimesSumAggregateOutputType | null
    _min: TimesMinAggregateOutputType | null
    _max: TimesMaxAggregateOutputType | null
  }

  export type TimesAvgAggregateOutputType = {
    id: number | null
  }

  export type TimesSumAggregateOutputType = {
    id: number | null
  }

  export type TimesMinAggregateOutputType = {
    id: number | null
    nometime: string | null
    created_at: string | null
    updated_at: string | null
    logo: string | null
  }

  export type TimesMaxAggregateOutputType = {
    id: number | null
    nometime: string | null
    created_at: string | null
    updated_at: string | null
    logo: string | null
  }

  export type TimesCountAggregateOutputType = {
    id: number
    nometime: number
    created_at: number
    updated_at: number
    logo: number
    _all: number
  }


  export type TimesAvgAggregateInputType = {
    id?: true
  }

  export type TimesSumAggregateInputType = {
    id?: true
  }

  export type TimesMinAggregateInputType = {
    id?: true
    nometime?: true
    created_at?: true
    updated_at?: true
    logo?: true
  }

  export type TimesMaxAggregateInputType = {
    id?: true
    nometime?: true
    created_at?: true
    updated_at?: true
    logo?: true
  }

  export type TimesCountAggregateInputType = {
    id?: true
    nometime?: true
    created_at?: true
    updated_at?: true
    logo?: true
    _all?: true
  }

  export type TimesAggregateArgs = {
    /**
     * Filter which Times to aggregate.
     */
    where?: TimesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: Enumerable<TimesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Times
    **/
    _count?: true | TimesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimesMaxAggregateInputType
  }

  export type GetTimesAggregateType<T extends TimesAggregateArgs> = {
        [P in keyof T & keyof AggregateTimes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimes[P]>
      : GetScalarType<T[P], AggregateTimes[P]>
  }




  export type TimesGroupByArgs = {
    where?: TimesWhereInput
    orderBy?: Enumerable<TimesOrderByWithAggregationInput>
    by: TimesScalarFieldEnum[]
    having?: TimesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimesCountAggregateInputType | true
    _avg?: TimesAvgAggregateInputType
    _sum?: TimesSumAggregateInputType
    _min?: TimesMinAggregateInputType
    _max?: TimesMaxAggregateInputType
  }


  export type TimesGroupByOutputType = {
    id: number
    nometime: string
    created_at: string | null
    updated_at: string | null
    logo: string
    _count: TimesCountAggregateOutputType | null
    _avg: TimesAvgAggregateOutputType | null
    _sum: TimesSumAggregateOutputType | null
    _min: TimesMinAggregateOutputType | null
    _max: TimesMaxAggregateOutputType | null
  }

  type GetTimesGroupByPayload<T extends TimesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TimesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimesGroupByOutputType[P]>
            : GetScalarType<T[P], TimesGroupByOutputType[P]>
        }
      >
    >


  export type TimesSelect = {
    id?: boolean
    nometime?: boolean
    created_at?: boolean
    updated_at?: boolean
    logo?: boolean
    jogadorestime?: boolean | Times$jogadorestimeArgs
    _count?: boolean | TimesCountOutputTypeArgs
  }


  export type TimesInclude = {
    jogadorestime?: boolean | Times$jogadorestimeArgs
    _count?: boolean | TimesCountOutputTypeArgs
  }

  export type TimesGetPayload<S extends boolean | null | undefined | TimesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Times :
    S extends undefined ? never :
    S extends { include: any } & (TimesArgs | TimesFindManyArgs)
    ? Times  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'jogadorestime' ? Array < JogadoresGetPayload<S['include'][P]>>  :
        P extends '_count' ? TimesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TimesArgs | TimesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'jogadorestime' ? Array < JogadoresGetPayload<S['select'][P]>>  :
        P extends '_count' ? TimesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Times ? Times[P] : never
  } 
      : Times


  type TimesCountArgs = 
    Omit<TimesFindManyArgs, 'select' | 'include'> & {
      select?: TimesCountAggregateInputType | true
    }

  export interface TimesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Times that matches the filter.
     * @param {TimesFindUniqueArgs} args - Arguments to find a Times
     * @example
     * // Get one Times
     * const times = await prisma.times.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TimesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TimesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Times'> extends True ? Prisma__TimesClient<TimesGetPayload<T>> : Prisma__TimesClient<TimesGetPayload<T> | null, null>

    /**
     * Find one Times that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TimesFindUniqueOrThrowArgs} args - Arguments to find a Times
     * @example
     * // Get one Times
     * const times = await prisma.times.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TimesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TimesFindUniqueOrThrowArgs>
    ): Prisma__TimesClient<TimesGetPayload<T>>

    /**
     * Find the first Times that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimesFindFirstArgs} args - Arguments to find a Times
     * @example
     * // Get one Times
     * const times = await prisma.times.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TimesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TimesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Times'> extends True ? Prisma__TimesClient<TimesGetPayload<T>> : Prisma__TimesClient<TimesGetPayload<T> | null, null>

    /**
     * Find the first Times that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimesFindFirstOrThrowArgs} args - Arguments to find a Times
     * @example
     * // Get one Times
     * const times = await prisma.times.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TimesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TimesFindFirstOrThrowArgs>
    ): Prisma__TimesClient<TimesGetPayload<T>>

    /**
     * Find zero or more Times that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Times
     * const times = await prisma.times.findMany()
     * 
     * // Get first 10 Times
     * const times = await prisma.times.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timesWithIdOnly = await prisma.times.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TimesFindManyArgs>(
      args?: SelectSubset<T, TimesFindManyArgs>
    ): Prisma.PrismaPromise<Array<TimesGetPayload<T>>>

    /**
     * Create a Times.
     * @param {TimesCreateArgs} args - Arguments to create a Times.
     * @example
     * // Create one Times
     * const Times = await prisma.times.create({
     *   data: {
     *     // ... data to create a Times
     *   }
     * })
     * 
    **/
    create<T extends TimesCreateArgs>(
      args: SelectSubset<T, TimesCreateArgs>
    ): Prisma__TimesClient<TimesGetPayload<T>>

    /**
     * Create many Times.
     *     @param {TimesCreateManyArgs} args - Arguments to create many Times.
     *     @example
     *     // Create many Times
     *     const times = await prisma.times.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TimesCreateManyArgs>(
      args?: SelectSubset<T, TimesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Times.
     * @param {TimesDeleteArgs} args - Arguments to delete one Times.
     * @example
     * // Delete one Times
     * const Times = await prisma.times.delete({
     *   where: {
     *     // ... filter to delete one Times
     *   }
     * })
     * 
    **/
    delete<T extends TimesDeleteArgs>(
      args: SelectSubset<T, TimesDeleteArgs>
    ): Prisma__TimesClient<TimesGetPayload<T>>

    /**
     * Update one Times.
     * @param {TimesUpdateArgs} args - Arguments to update one Times.
     * @example
     * // Update one Times
     * const times = await prisma.times.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TimesUpdateArgs>(
      args: SelectSubset<T, TimesUpdateArgs>
    ): Prisma__TimesClient<TimesGetPayload<T>>

    /**
     * Delete zero or more Times.
     * @param {TimesDeleteManyArgs} args - Arguments to filter Times to delete.
     * @example
     * // Delete a few Times
     * const { count } = await prisma.times.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TimesDeleteManyArgs>(
      args?: SelectSubset<T, TimesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Times.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Times
     * const times = await prisma.times.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TimesUpdateManyArgs>(
      args: SelectSubset<T, TimesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Times.
     * @param {TimesUpsertArgs} args - Arguments to update or create a Times.
     * @example
     * // Update or create a Times
     * const times = await prisma.times.upsert({
     *   create: {
     *     // ... data to create a Times
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Times we want to update
     *   }
     * })
    **/
    upsert<T extends TimesUpsertArgs>(
      args: SelectSubset<T, TimesUpsertArgs>
    ): Prisma__TimesClient<TimesGetPayload<T>>

    /**
     * Count the number of Times.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimesCountArgs} args - Arguments to filter Times to count.
     * @example
     * // Count the number of Times
     * const count = await prisma.times.count({
     *   where: {
     *     // ... the filter for the Times we want to count
     *   }
     * })
    **/
    count<T extends TimesCountArgs>(
      args?: Subset<T, TimesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Times.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimesAggregateArgs>(args: Subset<T, TimesAggregateArgs>): Prisma.PrismaPromise<GetTimesAggregateType<T>>

    /**
     * Group by Times.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimesGroupByArgs['orderBy'] }
        : { orderBy?: TimesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Times.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TimesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    jogadorestime<T extends Times$jogadorestimeArgs= {}>(args?: Subset<T, Times$jogadorestimeArgs>): Prisma.PrismaPromise<Array<JogadoresGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Times base type for findUnique actions
   */
  export type TimesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * Filter, which Times to fetch.
     */
    where: TimesWhereUniqueInput
  }

  /**
   * Times findUnique
   */
  export interface TimesFindUniqueArgs extends TimesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Times findUniqueOrThrow
   */
  export type TimesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * Filter, which Times to fetch.
     */
    where: TimesWhereUniqueInput
  }


  /**
   * Times base type for findFirst actions
   */
  export type TimesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * Filter, which Times to fetch.
     */
    where?: TimesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: Enumerable<TimesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Times.
     */
    cursor?: TimesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Times.
     */
    distinct?: Enumerable<TimesScalarFieldEnum>
  }

  /**
   * Times findFirst
   */
  export interface TimesFindFirstArgs extends TimesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Times findFirstOrThrow
   */
  export type TimesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * Filter, which Times to fetch.
     */
    where?: TimesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: Enumerable<TimesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Times.
     */
    cursor?: TimesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Times.
     */
    distinct?: Enumerable<TimesScalarFieldEnum>
  }


  /**
   * Times findMany
   */
  export type TimesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * Filter, which Times to fetch.
     */
    where?: TimesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: Enumerable<TimesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Times.
     */
    cursor?: TimesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    distinct?: Enumerable<TimesScalarFieldEnum>
  }


  /**
   * Times create
   */
  export type TimesCreateArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * The data needed to create a Times.
     */
    data: XOR<TimesCreateInput, TimesUncheckedCreateInput>
  }


  /**
   * Times createMany
   */
  export type TimesCreateManyArgs = {
    /**
     * The data used to create many Times.
     */
    data: Enumerable<TimesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Times update
   */
  export type TimesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * The data needed to update a Times.
     */
    data: XOR<TimesUpdateInput, TimesUncheckedUpdateInput>
    /**
     * Choose, which Times to update.
     */
    where: TimesWhereUniqueInput
  }


  /**
   * Times updateMany
   */
  export type TimesUpdateManyArgs = {
    /**
     * The data used to update Times.
     */
    data: XOR<TimesUpdateManyMutationInput, TimesUncheckedUpdateManyInput>
    /**
     * Filter which Times to update
     */
    where?: TimesWhereInput
  }


  /**
   * Times upsert
   */
  export type TimesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * The filter to search for the Times to update in case it exists.
     */
    where: TimesWhereUniqueInput
    /**
     * In case the Times found by the `where` argument doesn't exist, create a new Times with this data.
     */
    create: XOR<TimesCreateInput, TimesUncheckedCreateInput>
    /**
     * In case the Times was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimesUpdateInput, TimesUncheckedUpdateInput>
  }


  /**
   * Times delete
   */
  export type TimesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
    /**
     * Filter which Times to delete.
     */
    where: TimesWhereUniqueInput
  }


  /**
   * Times deleteMany
   */
  export type TimesDeleteManyArgs = {
    /**
     * Filter which Times to delete
     */
    where?: TimesWhereInput
  }


  /**
   * Times.jogadorestime
   */
  export type Times$jogadorestimeArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    where?: JogadoresWhereInput
    orderBy?: Enumerable<JogadoresOrderByWithRelationInput>
    cursor?: JogadoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<JogadoresScalarFieldEnum>
  }


  /**
   * Times without action
   */
  export type TimesArgs = {
    /**
     * Select specific fields to fetch from the Times
     */
    select?: TimesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimesInclude | null
  }



  /**
   * Model Jogadores
   */


  export type AggregateJogadores = {
    _count: JogadoresCountAggregateOutputType | null
    _avg: JogadoresAvgAggregateOutputType | null
    _sum: JogadoresSumAggregateOutputType | null
    _min: JogadoresMinAggregateOutputType | null
    _max: JogadoresMaxAggregateOutputType | null
  }

  export type JogadoresAvgAggregateOutputType = {
    id: number | null
    numerocamisa: number | null
    timesId: number | null
  }

  export type JogadoresSumAggregateOutputType = {
    id: number | null
    numerocamisa: number | null
    timesId: number | null
  }

  export type JogadoresMinAggregateOutputType = {
    id: number | null
    nomejogador: string | null
    numerocamisa: number | null
    posicao: string | null
    timesId: number | null
    avatar: string | null
  }

  export type JogadoresMaxAggregateOutputType = {
    id: number | null
    nomejogador: string | null
    numerocamisa: number | null
    posicao: string | null
    timesId: number | null
    avatar: string | null
  }

  export type JogadoresCountAggregateOutputType = {
    id: number
    nomejogador: number
    numerocamisa: number
    posicao: number
    timesId: number
    avatar: number
    _all: number
  }


  export type JogadoresAvgAggregateInputType = {
    id?: true
    numerocamisa?: true
    timesId?: true
  }

  export type JogadoresSumAggregateInputType = {
    id?: true
    numerocamisa?: true
    timesId?: true
  }

  export type JogadoresMinAggregateInputType = {
    id?: true
    nomejogador?: true
    numerocamisa?: true
    posicao?: true
    timesId?: true
    avatar?: true
  }

  export type JogadoresMaxAggregateInputType = {
    id?: true
    nomejogador?: true
    numerocamisa?: true
    posicao?: true
    timesId?: true
    avatar?: true
  }

  export type JogadoresCountAggregateInputType = {
    id?: true
    nomejogador?: true
    numerocamisa?: true
    posicao?: true
    timesId?: true
    avatar?: true
    _all?: true
  }

  export type JogadoresAggregateArgs = {
    /**
     * Filter which Jogadores to aggregate.
     */
    where?: JogadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadores to fetch.
     */
    orderBy?: Enumerable<JogadoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JogadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jogadores
    **/
    _count?: true | JogadoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JogadoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JogadoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JogadoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JogadoresMaxAggregateInputType
  }

  export type GetJogadoresAggregateType<T extends JogadoresAggregateArgs> = {
        [P in keyof T & keyof AggregateJogadores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJogadores[P]>
      : GetScalarType<T[P], AggregateJogadores[P]>
  }




  export type JogadoresGroupByArgs = {
    where?: JogadoresWhereInput
    orderBy?: Enumerable<JogadoresOrderByWithAggregationInput>
    by: JogadoresScalarFieldEnum[]
    having?: JogadoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JogadoresCountAggregateInputType | true
    _avg?: JogadoresAvgAggregateInputType
    _sum?: JogadoresSumAggregateInputType
    _min?: JogadoresMinAggregateInputType
    _max?: JogadoresMaxAggregateInputType
  }


  export type JogadoresGroupByOutputType = {
    id: number
    nomejogador: string
    numerocamisa: number
    posicao: string
    timesId: number | null
    avatar: string
    _count: JogadoresCountAggregateOutputType | null
    _avg: JogadoresAvgAggregateOutputType | null
    _sum: JogadoresSumAggregateOutputType | null
    _min: JogadoresMinAggregateOutputType | null
    _max: JogadoresMaxAggregateOutputType | null
  }

  type GetJogadoresGroupByPayload<T extends JogadoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<JogadoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JogadoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JogadoresGroupByOutputType[P]>
            : GetScalarType<T[P], JogadoresGroupByOutputType[P]>
        }
      >
    >


  export type JogadoresSelect = {
    id?: boolean
    nomejogador?: boolean
    numerocamisa?: boolean
    posicao?: boolean
    timesId?: boolean
    avatar?: boolean
    Times?: boolean | TimesArgs
  }


  export type JogadoresInclude = {
    Times?: boolean | TimesArgs
  }

  export type JogadoresGetPayload<S extends boolean | null | undefined | JogadoresArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Jogadores :
    S extends undefined ? never :
    S extends { include: any } & (JogadoresArgs | JogadoresFindManyArgs)
    ? Jogadores  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Times' ? TimesGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (JogadoresArgs | JogadoresFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Times' ? TimesGetPayload<S['select'][P]> | null :  P extends keyof Jogadores ? Jogadores[P] : never
  } 
      : Jogadores


  type JogadoresCountArgs = 
    Omit<JogadoresFindManyArgs, 'select' | 'include'> & {
      select?: JogadoresCountAggregateInputType | true
    }

  export interface JogadoresDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Jogadores that matches the filter.
     * @param {JogadoresFindUniqueArgs} args - Arguments to find a Jogadores
     * @example
     * // Get one Jogadores
     * const jogadores = await prisma.jogadores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JogadoresFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JogadoresFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Jogadores'> extends True ? Prisma__JogadoresClient<JogadoresGetPayload<T>> : Prisma__JogadoresClient<JogadoresGetPayload<T> | null, null>

    /**
     * Find one Jogadores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JogadoresFindUniqueOrThrowArgs} args - Arguments to find a Jogadores
     * @example
     * // Get one Jogadores
     * const jogadores = await prisma.jogadores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JogadoresFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, JogadoresFindUniqueOrThrowArgs>
    ): Prisma__JogadoresClient<JogadoresGetPayload<T>>

    /**
     * Find the first Jogadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadoresFindFirstArgs} args - Arguments to find a Jogadores
     * @example
     * // Get one Jogadores
     * const jogadores = await prisma.jogadores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JogadoresFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JogadoresFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Jogadores'> extends True ? Prisma__JogadoresClient<JogadoresGetPayload<T>> : Prisma__JogadoresClient<JogadoresGetPayload<T> | null, null>

    /**
     * Find the first Jogadores that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadoresFindFirstOrThrowArgs} args - Arguments to find a Jogadores
     * @example
     * // Get one Jogadores
     * const jogadores = await prisma.jogadores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JogadoresFindFirstOrThrowArgs>(
      args?: SelectSubset<T, JogadoresFindFirstOrThrowArgs>
    ): Prisma__JogadoresClient<JogadoresGetPayload<T>>

    /**
     * Find zero or more Jogadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jogadores
     * const jogadores = await prisma.jogadores.findMany()
     * 
     * // Get first 10 Jogadores
     * const jogadores = await prisma.jogadores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jogadoresWithIdOnly = await prisma.jogadores.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JogadoresFindManyArgs>(
      args?: SelectSubset<T, JogadoresFindManyArgs>
    ): Prisma.PrismaPromise<Array<JogadoresGetPayload<T>>>

    /**
     * Create a Jogadores.
     * @param {JogadoresCreateArgs} args - Arguments to create a Jogadores.
     * @example
     * // Create one Jogadores
     * const Jogadores = await prisma.jogadores.create({
     *   data: {
     *     // ... data to create a Jogadores
     *   }
     * })
     * 
    **/
    create<T extends JogadoresCreateArgs>(
      args: SelectSubset<T, JogadoresCreateArgs>
    ): Prisma__JogadoresClient<JogadoresGetPayload<T>>

    /**
     * Create many Jogadores.
     *     @param {JogadoresCreateManyArgs} args - Arguments to create many Jogadores.
     *     @example
     *     // Create many Jogadores
     *     const jogadores = await prisma.jogadores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JogadoresCreateManyArgs>(
      args?: SelectSubset<T, JogadoresCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jogadores.
     * @param {JogadoresDeleteArgs} args - Arguments to delete one Jogadores.
     * @example
     * // Delete one Jogadores
     * const Jogadores = await prisma.jogadores.delete({
     *   where: {
     *     // ... filter to delete one Jogadores
     *   }
     * })
     * 
    **/
    delete<T extends JogadoresDeleteArgs>(
      args: SelectSubset<T, JogadoresDeleteArgs>
    ): Prisma__JogadoresClient<JogadoresGetPayload<T>>

    /**
     * Update one Jogadores.
     * @param {JogadoresUpdateArgs} args - Arguments to update one Jogadores.
     * @example
     * // Update one Jogadores
     * const jogadores = await prisma.jogadores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JogadoresUpdateArgs>(
      args: SelectSubset<T, JogadoresUpdateArgs>
    ): Prisma__JogadoresClient<JogadoresGetPayload<T>>

    /**
     * Delete zero or more Jogadores.
     * @param {JogadoresDeleteManyArgs} args - Arguments to filter Jogadores to delete.
     * @example
     * // Delete a few Jogadores
     * const { count } = await prisma.jogadores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JogadoresDeleteManyArgs>(
      args?: SelectSubset<T, JogadoresDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jogadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jogadores
     * const jogadores = await prisma.jogadores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JogadoresUpdateManyArgs>(
      args: SelectSubset<T, JogadoresUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jogadores.
     * @param {JogadoresUpsertArgs} args - Arguments to update or create a Jogadores.
     * @example
     * // Update or create a Jogadores
     * const jogadores = await prisma.jogadores.upsert({
     *   create: {
     *     // ... data to create a Jogadores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jogadores we want to update
     *   }
     * })
    **/
    upsert<T extends JogadoresUpsertArgs>(
      args: SelectSubset<T, JogadoresUpsertArgs>
    ): Prisma__JogadoresClient<JogadoresGetPayload<T>>

    /**
     * Count the number of Jogadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadoresCountArgs} args - Arguments to filter Jogadores to count.
     * @example
     * // Count the number of Jogadores
     * const count = await prisma.jogadores.count({
     *   where: {
     *     // ... the filter for the Jogadores we want to count
     *   }
     * })
    **/
    count<T extends JogadoresCountArgs>(
      args?: Subset<T, JogadoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JogadoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jogadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JogadoresAggregateArgs>(args: Subset<T, JogadoresAggregateArgs>): Prisma.PrismaPromise<GetJogadoresAggregateType<T>>

    /**
     * Group by Jogadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogadoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JogadoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JogadoresGroupByArgs['orderBy'] }
        : { orderBy?: JogadoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JogadoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJogadoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Jogadores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JogadoresClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Times<T extends TimesArgs= {}>(args?: Subset<T, TimesArgs>): Prisma__TimesClient<TimesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Jogadores base type for findUnique actions
   */
  export type JogadoresFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * Filter, which Jogadores to fetch.
     */
    where: JogadoresWhereUniqueInput
  }

  /**
   * Jogadores findUnique
   */
  export interface JogadoresFindUniqueArgs extends JogadoresFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Jogadores findUniqueOrThrow
   */
  export type JogadoresFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * Filter, which Jogadores to fetch.
     */
    where: JogadoresWhereUniqueInput
  }


  /**
   * Jogadores base type for findFirst actions
   */
  export type JogadoresFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * Filter, which Jogadores to fetch.
     */
    where?: JogadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadores to fetch.
     */
    orderBy?: Enumerable<JogadoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogadores.
     */
    cursor?: JogadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogadores.
     */
    distinct?: Enumerable<JogadoresScalarFieldEnum>
  }

  /**
   * Jogadores findFirst
   */
  export interface JogadoresFindFirstArgs extends JogadoresFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Jogadores findFirstOrThrow
   */
  export type JogadoresFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * Filter, which Jogadores to fetch.
     */
    where?: JogadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadores to fetch.
     */
    orderBy?: Enumerable<JogadoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogadores.
     */
    cursor?: JogadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogadores.
     */
    distinct?: Enumerable<JogadoresScalarFieldEnum>
  }


  /**
   * Jogadores findMany
   */
  export type JogadoresFindManyArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * Filter, which Jogadores to fetch.
     */
    where?: JogadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogadores to fetch.
     */
    orderBy?: Enumerable<JogadoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jogadores.
     */
    cursor?: JogadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogadores.
     */
    skip?: number
    distinct?: Enumerable<JogadoresScalarFieldEnum>
  }


  /**
   * Jogadores create
   */
  export type JogadoresCreateArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * The data needed to create a Jogadores.
     */
    data: XOR<JogadoresCreateInput, JogadoresUncheckedCreateInput>
  }


  /**
   * Jogadores createMany
   */
  export type JogadoresCreateManyArgs = {
    /**
     * The data used to create many Jogadores.
     */
    data: Enumerable<JogadoresCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Jogadores update
   */
  export type JogadoresUpdateArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * The data needed to update a Jogadores.
     */
    data: XOR<JogadoresUpdateInput, JogadoresUncheckedUpdateInput>
    /**
     * Choose, which Jogadores to update.
     */
    where: JogadoresWhereUniqueInput
  }


  /**
   * Jogadores updateMany
   */
  export type JogadoresUpdateManyArgs = {
    /**
     * The data used to update Jogadores.
     */
    data: XOR<JogadoresUpdateManyMutationInput, JogadoresUncheckedUpdateManyInput>
    /**
     * Filter which Jogadores to update
     */
    where?: JogadoresWhereInput
  }


  /**
   * Jogadores upsert
   */
  export type JogadoresUpsertArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * The filter to search for the Jogadores to update in case it exists.
     */
    where: JogadoresWhereUniqueInput
    /**
     * In case the Jogadores found by the `where` argument doesn't exist, create a new Jogadores with this data.
     */
    create: XOR<JogadoresCreateInput, JogadoresUncheckedCreateInput>
    /**
     * In case the Jogadores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JogadoresUpdateInput, JogadoresUncheckedUpdateInput>
  }


  /**
   * Jogadores delete
   */
  export type JogadoresDeleteArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
    /**
     * Filter which Jogadores to delete.
     */
    where: JogadoresWhereUniqueInput
  }


  /**
   * Jogadores deleteMany
   */
  export type JogadoresDeleteManyArgs = {
    /**
     * Filter which Jogadores to delete
     */
    where?: JogadoresWhereInput
  }


  /**
   * Jogadores without action
   */
  export type JogadoresArgs = {
    /**
     * Select specific fields to fetch from the Jogadores
     */
    select?: JogadoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JogadoresInclude | null
  }



  /**
   * Enums
   */

  export const JogadoresScalarFieldEnum: {
    id: 'id',
    nomejogador: 'nomejogador',
    numerocamisa: 'numerocamisa',
    posicao: 'posicao',
    timesId: 'timesId',
    avatar: 'avatar'
  };

  export type JogadoresScalarFieldEnum = (typeof JogadoresScalarFieldEnum)[keyof typeof JogadoresScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TimesScalarFieldEnum: {
    id: 'id',
    nometime: 'nometime',
    created_at: 'created_at',
    updated_at: 'updated_at',
    logo: 'logo'
  };

  export type TimesScalarFieldEnum = (typeof TimesScalarFieldEnum)[keyof typeof TimesScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type TimesWhereInput = {
    AND?: Enumerable<TimesWhereInput>
    OR?: Enumerable<TimesWhereInput>
    NOT?: Enumerable<TimesWhereInput>
    id?: IntFilter | number
    nometime?: StringFilter | string
    created_at?: StringNullableFilter | string | null
    updated_at?: StringNullableFilter | string | null
    logo?: StringFilter | string
    jogadorestime?: JogadoresListRelationFilter
  }

  export type TimesOrderByWithRelationInput = {
    id?: SortOrder
    nometime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    logo?: SortOrder
    jogadorestime?: JogadoresOrderByRelationAggregateInput
  }

  export type TimesWhereUniqueInput = {
    id?: number
    nometime?: string
  }

  export type TimesOrderByWithAggregationInput = {
    id?: SortOrder
    nometime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    logo?: SortOrder
    _count?: TimesCountOrderByAggregateInput
    _avg?: TimesAvgOrderByAggregateInput
    _max?: TimesMaxOrderByAggregateInput
    _min?: TimesMinOrderByAggregateInput
    _sum?: TimesSumOrderByAggregateInput
  }

  export type TimesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TimesScalarWhereWithAggregatesInput>
    OR?: Enumerable<TimesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TimesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nometime?: StringWithAggregatesFilter | string
    created_at?: StringNullableWithAggregatesFilter | string | null
    updated_at?: StringNullableWithAggregatesFilter | string | null
    logo?: StringWithAggregatesFilter | string
  }

  export type JogadoresWhereInput = {
    AND?: Enumerable<JogadoresWhereInput>
    OR?: Enumerable<JogadoresWhereInput>
    NOT?: Enumerable<JogadoresWhereInput>
    id?: IntFilter | number
    nomejogador?: StringFilter | string
    numerocamisa?: IntFilter | number
    posicao?: StringFilter | string
    timesId?: IntNullableFilter | number | null
    avatar?: StringFilter | string
    Times?: XOR<TimesRelationFilter, TimesWhereInput> | null
  }

  export type JogadoresOrderByWithRelationInput = {
    id?: SortOrder
    nomejogador?: SortOrder
    numerocamisa?: SortOrder
    posicao?: SortOrder
    timesId?: SortOrder
    avatar?: SortOrder
    Times?: TimesOrderByWithRelationInput
  }

  export type JogadoresWhereUniqueInput = {
    id?: number
  }

  export type JogadoresOrderByWithAggregationInput = {
    id?: SortOrder
    nomejogador?: SortOrder
    numerocamisa?: SortOrder
    posicao?: SortOrder
    timesId?: SortOrder
    avatar?: SortOrder
    _count?: JogadoresCountOrderByAggregateInput
    _avg?: JogadoresAvgOrderByAggregateInput
    _max?: JogadoresMaxOrderByAggregateInput
    _min?: JogadoresMinOrderByAggregateInput
    _sum?: JogadoresSumOrderByAggregateInput
  }

  export type JogadoresScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JogadoresScalarWhereWithAggregatesInput>
    OR?: Enumerable<JogadoresScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JogadoresScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nomejogador?: StringWithAggregatesFilter | string
    numerocamisa?: IntWithAggregatesFilter | number
    posicao?: StringWithAggregatesFilter | string
    timesId?: IntNullableWithAggregatesFilter | number | null
    avatar?: StringWithAggregatesFilter | string
  }

  export type TimesCreateInput = {
    nometime: string
    created_at?: string | null
    updated_at?: string | null
    logo: string
    jogadorestime?: JogadoresCreateNestedManyWithoutTimesInput
  }

  export type TimesUncheckedCreateInput = {
    id?: number
    nometime: string
    created_at?: string | null
    updated_at?: string | null
    logo: string
    jogadorestime?: JogadoresUncheckedCreateNestedManyWithoutTimesInput
  }

  export type TimesUpdateInput = {
    nometime?: StringFieldUpdateOperationsInput | string
    created_at?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: StringFieldUpdateOperationsInput | string
    jogadorestime?: JogadoresUpdateManyWithoutTimesNestedInput
  }

  export type TimesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nometime?: StringFieldUpdateOperationsInput | string
    created_at?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: StringFieldUpdateOperationsInput | string
    jogadorestime?: JogadoresUncheckedUpdateManyWithoutTimesNestedInput
  }

  export type TimesCreateManyInput = {
    id?: number
    nometime: string
    created_at?: string | null
    updated_at?: string | null
    logo: string
  }

  export type TimesUpdateManyMutationInput = {
    nometime?: StringFieldUpdateOperationsInput | string
    created_at?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type TimesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nometime?: StringFieldUpdateOperationsInput | string
    created_at?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type JogadoresCreateInput = {
    nomejogador: string
    numerocamisa: number
    posicao: string
    avatar: string
    Times?: TimesCreateNestedOneWithoutJogadorestimeInput
  }

  export type JogadoresUncheckedCreateInput = {
    id?: number
    nomejogador: string
    numerocamisa: number
    posicao: string
    timesId?: number | null
    avatar: string
  }

  export type JogadoresUpdateInput = {
    nomejogador?: StringFieldUpdateOperationsInput | string
    numerocamisa?: IntFieldUpdateOperationsInput | number
    posicao?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    Times?: TimesUpdateOneWithoutJogadorestimeNestedInput
  }

  export type JogadoresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomejogador?: StringFieldUpdateOperationsInput | string
    numerocamisa?: IntFieldUpdateOperationsInput | number
    posicao?: StringFieldUpdateOperationsInput | string
    timesId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type JogadoresCreateManyInput = {
    id?: number
    nomejogador: string
    numerocamisa: number
    posicao: string
    timesId?: number | null
    avatar: string
  }

  export type JogadoresUpdateManyMutationInput = {
    nomejogador?: StringFieldUpdateOperationsInput | string
    numerocamisa?: IntFieldUpdateOperationsInput | number
    posicao?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type JogadoresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomejogador?: StringFieldUpdateOperationsInput | string
    numerocamisa?: IntFieldUpdateOperationsInput | number
    posicao?: StringFieldUpdateOperationsInput | string
    timesId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type JogadoresListRelationFilter = {
    every?: JogadoresWhereInput
    some?: JogadoresWhereInput
    none?: JogadoresWhereInput
  }

  export type JogadoresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimesCountOrderByAggregateInput = {
    id?: SortOrder
    nometime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    logo?: SortOrder
  }

  export type TimesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TimesMaxOrderByAggregateInput = {
    id?: SortOrder
    nometime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    logo?: SortOrder
  }

  export type TimesMinOrderByAggregateInput = {
    id?: SortOrder
    nometime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    logo?: SortOrder
  }

  export type TimesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TimesRelationFilter = {
    is?: TimesWhereInput | null
    isNot?: TimesWhereInput | null
  }

  export type JogadoresCountOrderByAggregateInput = {
    id?: SortOrder
    nomejogador?: SortOrder
    numerocamisa?: SortOrder
    posicao?: SortOrder
    timesId?: SortOrder
    avatar?: SortOrder
  }

  export type JogadoresAvgOrderByAggregateInput = {
    id?: SortOrder
    numerocamisa?: SortOrder
    timesId?: SortOrder
  }

  export type JogadoresMaxOrderByAggregateInput = {
    id?: SortOrder
    nomejogador?: SortOrder
    numerocamisa?: SortOrder
    posicao?: SortOrder
    timesId?: SortOrder
    avatar?: SortOrder
  }

  export type JogadoresMinOrderByAggregateInput = {
    id?: SortOrder
    nomejogador?: SortOrder
    numerocamisa?: SortOrder
    posicao?: SortOrder
    timesId?: SortOrder
    avatar?: SortOrder
  }

  export type JogadoresSumOrderByAggregateInput = {
    id?: SortOrder
    numerocamisa?: SortOrder
    timesId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type JogadoresCreateNestedManyWithoutTimesInput = {
    create?: XOR<Enumerable<JogadoresCreateWithoutTimesInput>, Enumerable<JogadoresUncheckedCreateWithoutTimesInput>>
    connectOrCreate?: Enumerable<JogadoresCreateOrConnectWithoutTimesInput>
    createMany?: JogadoresCreateManyTimesInputEnvelope
    connect?: Enumerable<JogadoresWhereUniqueInput>
  }

  export type JogadoresUncheckedCreateNestedManyWithoutTimesInput = {
    create?: XOR<Enumerable<JogadoresCreateWithoutTimesInput>, Enumerable<JogadoresUncheckedCreateWithoutTimesInput>>
    connectOrCreate?: Enumerable<JogadoresCreateOrConnectWithoutTimesInput>
    createMany?: JogadoresCreateManyTimesInputEnvelope
    connect?: Enumerable<JogadoresWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type JogadoresUpdateManyWithoutTimesNestedInput = {
    create?: XOR<Enumerable<JogadoresCreateWithoutTimesInput>, Enumerable<JogadoresUncheckedCreateWithoutTimesInput>>
    connectOrCreate?: Enumerable<JogadoresCreateOrConnectWithoutTimesInput>
    upsert?: Enumerable<JogadoresUpsertWithWhereUniqueWithoutTimesInput>
    createMany?: JogadoresCreateManyTimesInputEnvelope
    set?: Enumerable<JogadoresWhereUniqueInput>
    disconnect?: Enumerable<JogadoresWhereUniqueInput>
    delete?: Enumerable<JogadoresWhereUniqueInput>
    connect?: Enumerable<JogadoresWhereUniqueInput>
    update?: Enumerable<JogadoresUpdateWithWhereUniqueWithoutTimesInput>
    updateMany?: Enumerable<JogadoresUpdateManyWithWhereWithoutTimesInput>
    deleteMany?: Enumerable<JogadoresScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JogadoresUncheckedUpdateManyWithoutTimesNestedInput = {
    create?: XOR<Enumerable<JogadoresCreateWithoutTimesInput>, Enumerable<JogadoresUncheckedCreateWithoutTimesInput>>
    connectOrCreate?: Enumerable<JogadoresCreateOrConnectWithoutTimesInput>
    upsert?: Enumerable<JogadoresUpsertWithWhereUniqueWithoutTimesInput>
    createMany?: JogadoresCreateManyTimesInputEnvelope
    set?: Enumerable<JogadoresWhereUniqueInput>
    disconnect?: Enumerable<JogadoresWhereUniqueInput>
    delete?: Enumerable<JogadoresWhereUniqueInput>
    connect?: Enumerable<JogadoresWhereUniqueInput>
    update?: Enumerable<JogadoresUpdateWithWhereUniqueWithoutTimesInput>
    updateMany?: Enumerable<JogadoresUpdateManyWithWhereWithoutTimesInput>
    deleteMany?: Enumerable<JogadoresScalarWhereInput>
  }

  export type TimesCreateNestedOneWithoutJogadorestimeInput = {
    create?: XOR<TimesCreateWithoutJogadorestimeInput, TimesUncheckedCreateWithoutJogadorestimeInput>
    connectOrCreate?: TimesCreateOrConnectWithoutJogadorestimeInput
    connect?: TimesWhereUniqueInput
  }

  export type TimesUpdateOneWithoutJogadorestimeNestedInput = {
    create?: XOR<TimesCreateWithoutJogadorestimeInput, TimesUncheckedCreateWithoutJogadorestimeInput>
    connectOrCreate?: TimesCreateOrConnectWithoutJogadorestimeInput
    upsert?: TimesUpsertWithoutJogadorestimeInput
    disconnect?: boolean
    delete?: boolean
    connect?: TimesWhereUniqueInput
    update?: XOR<TimesUpdateWithoutJogadorestimeInput, TimesUncheckedUpdateWithoutJogadorestimeInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type JogadoresCreateWithoutTimesInput = {
    nomejogador: string
    numerocamisa: number
    posicao: string
    avatar: string
  }

  export type JogadoresUncheckedCreateWithoutTimesInput = {
    id?: number
    nomejogador: string
    numerocamisa: number
    posicao: string
    avatar: string
  }

  export type JogadoresCreateOrConnectWithoutTimesInput = {
    where: JogadoresWhereUniqueInput
    create: XOR<JogadoresCreateWithoutTimesInput, JogadoresUncheckedCreateWithoutTimesInput>
  }

  export type JogadoresCreateManyTimesInputEnvelope = {
    data: Enumerable<JogadoresCreateManyTimesInput>
    skipDuplicates?: boolean
  }

  export type JogadoresUpsertWithWhereUniqueWithoutTimesInput = {
    where: JogadoresWhereUniqueInput
    update: XOR<JogadoresUpdateWithoutTimesInput, JogadoresUncheckedUpdateWithoutTimesInput>
    create: XOR<JogadoresCreateWithoutTimesInput, JogadoresUncheckedCreateWithoutTimesInput>
  }

  export type JogadoresUpdateWithWhereUniqueWithoutTimesInput = {
    where: JogadoresWhereUniqueInput
    data: XOR<JogadoresUpdateWithoutTimesInput, JogadoresUncheckedUpdateWithoutTimesInput>
  }

  export type JogadoresUpdateManyWithWhereWithoutTimesInput = {
    where: JogadoresScalarWhereInput
    data: XOR<JogadoresUpdateManyMutationInput, JogadoresUncheckedUpdateManyWithoutJogadorestimeInput>
  }

  export type JogadoresScalarWhereInput = {
    AND?: Enumerable<JogadoresScalarWhereInput>
    OR?: Enumerable<JogadoresScalarWhereInput>
    NOT?: Enumerable<JogadoresScalarWhereInput>
    id?: IntFilter | number
    nomejogador?: StringFilter | string
    numerocamisa?: IntFilter | number
    posicao?: StringFilter | string
    timesId?: IntNullableFilter | number | null
    avatar?: StringFilter | string
  }

  export type TimesCreateWithoutJogadorestimeInput = {
    nometime: string
    created_at?: string | null
    updated_at?: string | null
    logo: string
  }

  export type TimesUncheckedCreateWithoutJogadorestimeInput = {
    id?: number
    nometime: string
    created_at?: string | null
    updated_at?: string | null
    logo: string
  }

  export type TimesCreateOrConnectWithoutJogadorestimeInput = {
    where: TimesWhereUniqueInput
    create: XOR<TimesCreateWithoutJogadorestimeInput, TimesUncheckedCreateWithoutJogadorestimeInput>
  }

  export type TimesUpsertWithoutJogadorestimeInput = {
    update: XOR<TimesUpdateWithoutJogadorestimeInput, TimesUncheckedUpdateWithoutJogadorestimeInput>
    create: XOR<TimesCreateWithoutJogadorestimeInput, TimesUncheckedCreateWithoutJogadorestimeInput>
  }

  export type TimesUpdateWithoutJogadorestimeInput = {
    nometime?: StringFieldUpdateOperationsInput | string
    created_at?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type TimesUncheckedUpdateWithoutJogadorestimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nometime?: StringFieldUpdateOperationsInput | string
    created_at?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type JogadoresCreateManyTimesInput = {
    id?: number
    nomejogador: string
    numerocamisa: number
    posicao: string
    avatar: string
  }

  export type JogadoresUpdateWithoutTimesInput = {
    nomejogador?: StringFieldUpdateOperationsInput | string
    numerocamisa?: IntFieldUpdateOperationsInput | number
    posicao?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type JogadoresUncheckedUpdateWithoutTimesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomejogador?: StringFieldUpdateOperationsInput | string
    numerocamisa?: IntFieldUpdateOperationsInput | number
    posicao?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type JogadoresUncheckedUpdateManyWithoutJogadorestimeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomejogador?: StringFieldUpdateOperationsInput | string
    numerocamisa?: IntFieldUpdateOperationsInput | number
    posicao?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}